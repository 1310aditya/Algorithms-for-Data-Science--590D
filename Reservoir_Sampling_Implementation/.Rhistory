for (i in 1:n){
#Reservoir Sampling Algorithm (with reservoir= 1)
for(i in 1:100){
x <- i
dec <- runif(1)
probability <- 1/i
switch(dec > probability, resv <- x)
#probability <- c(1/i, 1-1/i)
#decision <- sample(c(T,F), 1, prob = probability)
#switch(decision, resv <- x)
}
print(resv)
counter[[resv]] = counter[[resv]] + 1
}
if(n == 1)
print(resv)
else
plot(counter)
}
resSample(1)
resSample(1)
resSample(1)
resSample(1)
resSample(1)
for (i in 1:n){
#Reservoir Sampling Algorithm (with reservoir= 1)
for(i in 1:100){
x <- i
dec <- runif(1)
probability <- 1/i
switch(dec <= probability, resv <- x)
#probability <- c(1/i, 1-1/i)
#decision <- sample(c(T,F), 1, prob = probability)
#switch(decision, resv <- x)
}
print(resv)
counter[[resv]] = counter[[resv]] + 1
}
resSample <- function(n){
resv <- integer()
counter <- vector(mode = "integer", length = 100)
#N Runs of Algorithm
for (i in 1:n){
#Reservoir Sampling Algorithm (with reservoir= 1)
for(i in 1:100){
x <- i
dec <- runif(1)
probability <- 1/i
switch(dec <= probability, resv <- x)
#probability <- c(1/i, 1-1/i)
#decision <- sample(c(T,F), 1, prob = probability)
#switch(decision, resv <- x)
}
print(resv)
counter[[resv]] = counter[[resv]] + 1
}
if(n == 1)
print(resv)
else
plot(counter)
}
resSample(1)
resSample(1)
resSample(1)
resSample(1)
resSample(1)
resSample(1)
resSample(1000)
resSample(10000)
resSample(100000)
resSample <- function(n){
resv <- integer()
counter <- vector(mode = "integer", length = 100)
#N Runs of Algorithm
for (i in 1:n){
#Reservoir Sampling Algorithm (with reservoir= 1)
for(i in 1:100){
x <- i
dec <- runif(1)
probability <- 1/i
switch(dec <= probability, resv <- x)
#probability <- c(1/i, 1-1/i)
#decision <- sample(c(T,F), 1, prob = probability)
#switch(decision, resv <- x)
}
#    print(resv)
counter[[resv]] = counter[[resv]] + 1
}
if(n == 1)
print(resv)
else
plot(counter)
}
resSample(100000)
resSample(10000)
resSample(1000000)
resSample(10000)
resSample <- function(n){
resv <- integer()
counter <- vector(mode = "integer", length = 100)
#N Runs of Algorithm
for (i in 1:n){
#Reservoir Sampling Algorithm (with reservoir= 1)
for(i in 1:100){
x <- i
#dec <- runif(1)
#probability <- 1/i
#switch(dec <= probability, resv <- x)
probability <- c(1/i, 1-1/i)
decision <- sample(c(T,F), 1, prob = probability)
switch(decision, resv <- x)
}
#    print(resv)
counter[[resv]] = counter[[resv]] + 1
}
if(n == 1)
print(resv)
else
plot(counter)
}
resSample(1)
resSample(1)
resSample(1)
resSample(1)
resSample(1000)
resSample(10000)
resSample <- function(n){
resv <- integer()
counter <- vector(mode = "integer", length = 100)
#N Runs of Algorithm
for (i in 1:n){
#Reservoir Sampling Algorithm (with reservoir= 1)
for(i in 1:100){
x <- i
#dec <- runif(1)
#probability <- 1/i
#switch(dec <= probability, resv <- x)
probability <- c(1/i, 1-1/i)
decision <- sample(c(T,F), 1, prob = probability)
switch(decision, resv <- x)
}
#    print(resv)
counter[[resv]] = counter[[resv]] + 1
}
if(n == 1)
print(resv)
else
qplot(counter)
}
resSample(1000)
library(ggplot2)
resSample(1000)
resSample(10000)
ggplot(counter) + line()
resSample <- function(n){
resv <- integer()
counter <- vector(mode = "integer", length = 100)
#N Runs of Algorithm
for (i in 1:n){
#Reservoir Sampling Algorithm (with reservoir= 1)
for(i in 1:100){
x <- i
#dec <- runif(1)
#probability <- 1/i
#switch(dec <= probability, resv <- x)
probability <- c(1/i, 1-1/i)
decision <- sample(c(T,F), 1, prob = probability)
switch(decision, resv <- x)
}
#    print(resv)
counter[[resv]] = counter[[resv]] + 1
}
if(n == 1)
print(resv)
else
ggplot(counter) + line()
}
resSample(1000)
resSample <- function(n){
resv <- integer()
counter <- vector(mode = "integer", length = 100)
#N Runs of Algorithm
for (i in 1:n){
#Reservoir Sampling Algorithm (with reservoir= 1)
for(i in 1:100){
x <- i
#dec <- runif(1)
#probability <- 1/i
#switch(dec <= probability, resv <- x)
probability <- c(1/i, 1-1/i)
decision <- sample(c(T,F), 1, prob = probability)
switch(decision, resv <- x)
}
#    print(resv)
counter[[resv]] = counter[[resv]] + 1
}
if(n == 1)
print(resv)
else
ggplot(counter) + geom_point() + geom_line()
}
resSample(1000)
counter
resSample <- function(n){
resv <- integer()
counter <- vector(mode = "integer", length = 100)
#N Runs of Algorithm
for (i in 1:n){
#Reservoir Sampling Algorithm (with reservoir= 1)
for(i in 1:100){
x <- i
#dec <- runif(1)
#probability <- 1/i
#switch(dec <= probability, resv <- x)
probability <- c(1/i, 1-1/i)
decision <- sample(c(T,F), 1, prob = probability)
switch(decision, resv <- x)
}
#    print(resv)
counter[[resv]] = counter[[resv]] + 1
}
if(n == 1)
print(resv)
else
plot(counter) + geom_line()
}
resSample(1000)
resSample <- function(n){
resv <- integer()
counter <- vector(mode = "integer", length = 100)
#N Runs of Algorithm
for (i in 1:n){
#Reservoir Sampling Algorithm (with reservoir= 1)
for(i in 1:100){
x <- i
#dec <- runif(1)
#probability <- 1/i
#switch(dec <= probability, resv <- x)
probability <- c(1/i, 1-1/i)
decision <- sample(c(T,F), 1, prob = probability)
switch(decision, resv <- x)
}
#    print(resv)
counter[[resv]] = counter[[resv]] + 1
}
if(n == 1)
print(resv)
else
qplot(counter, geom = "scatterplot")
}
resSample(1000)
resSample <- function(n){
resv <- integer()
counter <- vector(mode = "integer", length = 100)
#N Runs of Algorithm
for (i in 1:n){
#Reservoir Sampling Algorithm (with reservoir= 1)
for(i in 1:100){
x <- i
#dec <- runif(1)
#probability <- 1/i
#switch(dec <= probability, resv <- x)
probability <- c(1/i, 1-1/i)
decision <- sample(c(T,F), 1, prob = probability)
switch(decision, resv <- x)
}
#    print(resv)
counter[[resv]] = counter[[resv]] + 1
}
if(n == 1)
print(resv)
else
qplot(counter, geom = "smooth")
}
resSample(1000)
resSample <- function(n){
resv <- integer()
counter <- vector(mode = "integer", length = 100)
#N Runs of Algorithm
for (i in 1:n){
#Reservoir Sampling Algorithm (with reservoir= 1)
for(i in 1:100){
x <- i
#dec <- runif(1)
#probability <- 1/i
#switch(dec <= probability, resv <- x)
probability <- c(1/i, 1-1/i)
decision <- sample(c(T,F), 1, prob = probability)
switch(decision, resv <- x)
}
#    print(resv)
counter[[resv]] = counter[[resv]] + 1
}
if(n == 1)
print(resv)
dim(counter)
else
qplot(counter, geom = "smooth", aes())
}
resSample(1)
resSample <- function(n){
resv <- integer()
counter <- vector(mode = "integer", length = 100)
#N Runs of Algorithm
for (i in 1:n){
#Reservoir Sampling Algorithm (with reservoir= 1)
for(i in 1:100){
x <- i
#dec <- runif(1)
#probability <- 1/i
#switch(dec <= probability, resv <- x)
probability <- c(1/i, 1-1/i)
decision <- sample(c(T,F), 1, prob = probability)
switch(decision, resv <- x)
}
#    print(resv)
counter[[resv]] = counter[[resv]] + 1
}
if(n == 1)
print(resv)
dim(counter)
else
qplot(counter, geom = "smooth")
}
plot(counter, geom = "smooth")
resSample <- function(n){
resv <- integer()
counter <- vector(mode = "integer", length = 100)
#N Runs of Algorithm
for (i in 1:n){
#Reservoir Sampling Algorithm (with reservoir= 1)
for(i in 1:100){
x <- i
#dec <- runif(1)
#probability <- 1/i
#switch(dec <= probability, resv <- x)
probability <- c(1/i, 1-1/i)
decision <- sample(c(T,F), 1, prob = probability)
switch(decision, resv <- x)
}
#    print(resv)
counter[[resv]] = counter[[resv]] + 1
}
if(n == 1)
print(resv)
dim(counter)
else
plot(counter, geom = "smooth")
}
resSample <- function(n){
resv <- integer()
counter <- vector(mode = "integer", length = 100)
#N Runs of Algorithm
for (i in 1:n){
#Reservoir Sampling Algorithm (with reservoir= 1)
for(i in 1:100){
x <- i
#dec <- runif(1)
#probability <- 1/i
#switch(dec <= probability, resv <- x)
probability <- c(1/i, 1-1/i)
decision <- sample(c(T,F), 1, prob = probability)
switch(decision, resv <- x)
}
#    print(resv)
counter[[resv]] = counter[[resv]] + 1
}
if(n == 1)
{print(resv)
dim(counter)}
else
plot(counter, geom = "smooth")
}
resSample(1000)
resSample <- function(n){
resv <- integer()
counter <- vector(mode = "integer", length = 100)
#N Runs of Algorithm
for (i in 1:n){
#Reservoir Sampling Algorithm (with reservoir= 1)
for(i in 1:100){
x <- i
#dec <- runif(1)
#probability <- 1/i
#switch(dec <= probability, resv <- x)
probability <- c(1/i, 1-1/i)
decision <- sample(c(T,F), 1, prob = probability)
switch(decision, resv <- x)
}
#    print(resv)
counter[[resv]] = counter[[resv]] + 1
}
if(n == 1)
{print(resv)
dim(counter)}
else
plot(counter, type = "l")
}
resSample(1000)
resSample(10000)
resSample(100000)
resSample <- function(n){
resv <- integer()
counter <- vector(mode = "integer", length = 100)
#N Runs of Algorithm
for (i in 1:n){
#Reservoir Sampling Algorithm (with reservoir= 1)
for(i in 1:100){
x <- i
probability <- c(1/i, 1-1/i)
decision <- sample(c(T,F), 1, prob = probability)
switch(decision, resv <- x)
}
#    print(resv)
counter[[resv]] = counter[[resv]] + 1
}
if(n == 1)
{print(resv)
dim(counter)}
else
plot(counter, type = "b")
}
resSample(1000)
resSample <- function(n){
resv <- integer()
counter <- vector(mode = "integer", length = 100)
#N Runs of Algorithm
for (i in 1:n){
#Reservoir Sampling Algorithm (with reservoir= 1)
for(i in 1:100){
x <- i
probability <- c(1/i, 1-1/i)
decision <- sample(c(T,F), 1, prob = probability)
switch(decision, resv <- x)
}
#    print(resv)
counter[[resv]] = counter[[resv]] + 1
}
if(n == 1)
{print(resv)
dim(counter)}
else
plot(counter, type = "o")
}
resSample(1000)
resSample <- function(n){
resv <- integer()
counter <- vector(mode = "integer", length = 100)
#N Runs of Algorithm
for (i in 1:n){
#Reservoir Sampling Algorithm (with reservoir= 1)
for(i in 1:100){
x <- i
probability <- c(1/i, 1-1/i)
decision <- sample(c(T,F), 1, prob = probability)
switch(decision, resv <- x)
}
#    print(resv)
counter[[resv]] = counter[[resv]] + 1
}
if(n == 1)
{print(resv)
dim(counter)}
else
plot(counter, type = "o", col = "dark red")
}
resSample(1000)
resSample <- function(n){
resv <- integer()
counter <- vector(mode = "integer", length = 100)
#N Runs of Algorithm
for (i in 1:n){
#Reservoir Sampling Algorithm (with reservoir= 1)
for(i in 1:100){
x <- i
probability <- c(1/i, 1-1/i)
decision <- sample(c(T,F), 1, prob = probability)
switch(decision, resv <- x)
}
#    print(resv)
counter[[resv]] = counter[[resv]] + 1
}
if(n == 1)
{print(resv)
dim(counter)}
else
plot(counter, type = "l", col = "dark red")
}
resSample(1000)
rm(list = ls())
resSample <- function(n){
resv <- integer()
counter <- vector(mode = "integer", length = 100)
#N Runs of Algorithm
for (i in 1:n){
#Reservoir Sampling Algorithm (with reservoir= 1)
for(i in 1:100){
x <- i
probability <- c(1/i, 1-1/i)
decision <- sample(c(T,F), 1, prob = probability)
switch(decision, resv <- x)
}
counter[[resv]] = counter[[resv]] + 1
}
if(n == 1)
print(resv)
else
plot(counter, type = "l", col = "dark red")
}
resSample(1)
resSample(1)
resSample(1000)
